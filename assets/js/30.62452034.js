(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{576:function(s,t,a){"use strict";a.r(t);var n=a(12),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class"}},[s._v("#")]),s._v(" Class")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Foo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Fo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Foo 继承 Fo")]),s._v("\n    #count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("                          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 私有属性 (提案)")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("#sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 私有方法 (提案)")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" #count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 静态私有属性")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("#sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 静态私有方法")]),s._v("\n    \n    _value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("                          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实例属性(这里的下划线 `_` 是变量的一部分,不是标识符)")]),s._v("\n    age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("                            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实例属性")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("prop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 可使用getter关键字")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'getter'")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("prop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 可使用setter关键字")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'setter: '")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("...")]),s._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 也是原型的属性，指向构造函数Foo")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// super在这里是指向父类Fo(所以可以向父类传参) 子类在写constructor时必须调用(即 extends继承类的时候)")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("args "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" args                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实例属性")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("method")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实例方法")]),s._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("target "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// new.target 该属性一般用在构造函数之中，返回new命令作用于的那个构造函数  Class内部调用new.target，返回当前 Class 这里 === Foo")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true                         //  ->子类继承时 返回的是子类")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Generator方法")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" arg "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" myStaticProp "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("111")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 静态属性 类Foo的属性 === Foo.myStaticProp")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("staticMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 静态方法 类Foo的属性 === Foo.staticMethod ")]),s._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  ->静态方法中的this指向的是类 而不是实例")]),s._v("\n                                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  ->父类的静态方法和静态属性，可以被子类继承")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 原型方法 且不可枚举（es5的传统写法是prototype的属性是可枚举的）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("h3",{attrs:{id:"_1-关于继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-关于继承"}},[s._v("#")]),s._v(" 1.关于继承")]),s._v(" "),a("ol",[a("li",[s._v("父类的静态方法也会被子类继承。父类的实例属性和方法，也会被子类继承。")])]),s._v(" "),a("h3",{attrs:{id:"_2-object-getprototypeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-object-getprototypeof"}},[s._v("#")]),s._v(" 2."),a("code",[s._v("Object.getPrototypeOf")])]),s._v(" "),a("p",[a("code",[s._v("Object.getPrototypeOf")]),s._v("方法可以用来从子类上获取父类。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" Fo\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因此，可以使用这个方法判断，一个类是否继承了另一个类。")]),s._v(" "),a("h3",{attrs:{id:"_3-super关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-super关键字"}},[s._v("#")]),s._v(" 3. "),a("code",[s._v("super")]),s._v("关键字")]),s._v(" "),a("h4",{attrs:{id:"作为函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为函数"}},[s._v("#")]),s._v(" 作为函数")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("super")]),s._v("作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次"),a("code",[s._v("super")]),s._v("函数， 且只能在子类的构造函数 "),a("code",[s._v("constructor")]),s._v(" 中调用，用在其他地方就会报错。")]),s._v(" "),a("li",[s._v("注意，"),a("code",[s._v("super")]),s._v("虽然代表了父类"),a("code",[s._v("A")]),s._v("的构造函数，但是返回的是子类"),a("code",[s._v("B")]),s._v("的实例，即"),a("code",[s._v("super")]),s._v("内部的"),a("code",[s._v("this")]),s._v("指的是"),a("code",[s._v("B")]),s._v("的实例，因此"),a("code",[s._v("super()")]),s._v("在这里相当于"),a("code",[s._v("A.prototype.constructor.call(this)")]),s._v("。")])]),s._v(" "),a("h4",{attrs:{id:"作为对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为对象"}},[s._v("#")]),s._v(" 作为对象")]),s._v(" "),a("p",[a("code",[s._v("super")]),s._v("作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。")]),s._v(" "),a("ol",[a("li",[s._v("ES6 规定，在子类普通方法中通过"),a("code",[s._v("super")]),s._v("调用父类的方法时，方法内部的"),a("code",[s._v("this")]),s._v("指向当前的子类实例（此时是将"),a("code",[s._v("super")]),s._v("作为对象使用）。由于"),a("code",[s._v("this")]),s._v("指向子类实例，所以如果通过"),a("code",[s._v("super")]),s._v("对某个属性赋值，这时"),a("code",[s._v("super")]),s._v("就是"),a("code",[s._v("this")]),s._v("，赋值的属性会变成子类实例的属性。")])]),s._v(" "),a("p",[s._v("注意，使用"),a("code",[s._v("super")]),s._v("的时候，必须显式指定是作为函数、还是作为对象使用，否则会报错。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 报错")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_4-类的-prototype-属性和-proto-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-类的-prototype-属性和-proto-属性"}},[s._v("#")]),s._v(" 4.类的 "),a("code",[s._v("prototype")]),s._v(" 属性和"),a("code",[s._v("__proto__")]),s._v("属性")]),s._v(" "),a("p",[s._v("（1）子类的"),a("code",[s._v("__proto__")]),s._v("属性，表示构造函数的继承，总是指向父类。")]),s._v(" "),a("p",[s._v("（2）子类"),a("code",[s._v("prototype")]),s._v("属性的"),a("code",[s._v("__proto__")]),s._v("属性，表示方法的继承，总是指向父类的"),a("code",[s._v("prototype")]),s._v("属性。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"实例的-proto-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例的-proto-属性"}},[s._v("#")]),s._v(" 实例的 "),a("strong",[s._v("proto")]),s._v(" 属性")]),s._v(" "),a("p",[s._v("子类实例的__proto__属性的__proto__属性，指向父类实例的__proto__属性。也就是说，子类的原型的原型，是父类的原型。")]),s._v(" "),a("h3",{attrs:{id:"_5-原生构造函数的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-原生构造函数的继承"}},[s._v("#")]),s._v(" 5. "),a("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/class-extends#%E5%8E%9F%E7%94%9F%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%A7%E6%89%BF",target:"_blank",rel:"noopener noreferrer"}},[s._v("原生构造函数的继承"),a("OutboundLink")],1)]),s._v(" "),a("h3",{attrs:{id:"_6-mixin-模式的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-mixin-模式的实现"}},[s._v("#")]),s._v(" 6. "),a("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/class-extends#Mixin-%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("Mixin 模式的实现"),a("OutboundLink")],1)]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"备注"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备注"}},[s._v("#")]),s._v(" 备注")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("class")]),s._v(" 定义类的时候，构造器中只能向 "),a("code",[s._v("prototype")]),s._v(" 原型上添加方法，不能添加属性。属性需要额外在 "),a("code",[s._v("prototype")]),s._v(" 属性上添加。")]),s._v(" "),a("li",[s._v("类的 "),a("code",[s._v("prototype")]),s._v(" 的 "),a("code",[s._v("writable, enumerable, configurable")]),s._v(" 特性均为 "),a("code",[s._v("false")]),s._v(" 。")])]),s._v(" "),a("h3",{attrs:{id:"拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拓展"}},[s._v("#")]),s._v(" 拓展")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/20",target:"_blank",rel:"noopener noreferrer"}},[s._v("ES5/ES6 的继承除了写法以外还有什么区别？"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);